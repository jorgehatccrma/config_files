# Config inspiration from
# http://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/
# and
# https://github.com/nicknisi/dotfiles/blob/master/tmux/tmux.conf.symlink

# set -g default-command "login-shell"

# # tmux display things in 256 colors
# set -g default-terminal "tmux-256color-italic"

# # enable terminal compability
# set-option -ga terminal-overrides ",tmux-256color-italic:Tc"

# to simplify version dependent config
run-shell "tmux setenv -g TMUX_VERSION $(tmux -V | cut -c 6-)"


set-option -g default-terminal "xterm-256color"
# set-option -g default-terminal "screen-256color"
# set-option -g default-terminal "tmux-256color"
set-option -ga terminal-overrides ",xterm-256color:Tc"

#set-option -g default-command "reattach-to-user-namespace -l $SHELL"
if-shell 'test "$(uname)" = "Darwin"' 'source ~/.tmux-osx.conf'


# remap prefix from 'C-b' to 'C-\'
unbind C-b
# set-option -g prefix 'C-\'
# bind-key 'C-\' send-prefix
set-option -g prefix 'M-\'
bind-key 'M-\' send-prefix
# set-option -g prefix 'M-a'
# bind-key 'M-a' send-prefix

# Use | and - to split panes
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
unbind '"'
unbind %

# switch panes using Alt-arrow without prefix
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D


# Enable mouse mode (tmux 2.1 and above)
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.1" | bc)" = 1  ]' \
  "set -g mouse-select-pane on; set -g mode-mouse on; \
    set -g mouse-resize-pane on; set -g mouse-select-window on"
# In version 2.1 "mouse" replaced the previous 4 mouse options
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.1" | bc)" = 1  ]' \
  "set -g mouse on"


# reload config file
bind r source-file ~/.tmux.conf


# set vi mode for copy mode
setw -g mode-keys vi
# more settings to make copy-mode more vim-like
unbind [
bind Escape copy-mode
unbind p
bind p paste-buffer
bind -Tcopy-mode-vi v send -X begin-selection
bind -Tcopy-mode-vi y send -X copy-pipe "reattach-to-user-namespace pbcopy"

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# don't rename windows automatically
set-option -g allow-rename off

# better behaved ESC key
# see
# (https://unix.stackexchange.com/questions/23138/esc-key-causes-a-small-delay-in-terminal-due-to-its-alt-behavior/25638#25638)
set -s escape-time 0


# quickly toggel pane synchronization
bind s set-window-option synchronize-panes

source-file ~/.bolero.tmux.conf

# source-file ~/.tmux/dark.conf
# # source-file ~/.tmux/light.conf
# bind C source-file ~/.tmux/dark.conf \; display-message "Dark theme reloaded..."
# bind V source-file ~/.tmux/light.conf \; display-message "Light theme reloaded..."

# message and info display timings
set -g display-panes-time 3000 # longer pane indicators display time
set -g display-time 3000       # longer status messages display time
set -g status-interval 10      # redraw status line every 10 seconds


# For tmux-spotify-info to work (OS X only), add a script called 'tmux-spotify-info' to the
# path (e.g. ~/bin/tmux-spotify-info) with the following content (from
# https://github.com/jdxcode/tmux-spotify-info/blob/master/tmux-spotify-info):
#
# #!/usr/bin/env osascript
# # Returns the current playing song in Spotify for OSX
#
# tell application "Spotify"
#   if it is running then
#     if player state is playing then
#       set track_name to name of current track
#       set artist_name to artist of current track
#
#       if artist_name > 0
#         # If the track has an artist set and is therefore most likely a song rather than an advert
#         "♫ " & artist_name & " - " & track_name
#       else
#         # If the track doesn't have an artist set and is therefore most likely an advert rather than a song
#         "~ " & track_name
#       end if
#     end if
#   end if
# end tell


# For tmux-itunes-info to work (OS X only), add a script called 'tmux-itunes-info' to the
# path (e.g. ~/bin/tmux-itunes-info) with the following content:
#
# #!/usr/bin/env osascript
# # Returns the current playing song in iTunes for OSX

#!/usr/bin/env osascript
# Returns the current playing song in Spotify for OSX
#
# tell application "iTunes"
#   if it is running then
#     if player state is playing then
#       set track_title to name of the current track
#       set artist_name to artist of the current track
#       if artist_name > 0 then
#         "♫ " & artist_name & " - " & track_title
#       else
#         "♫ " & "[???] - " & track_title
#       end if
#     end if
#   end if
# end tell

# for `batterleft.sh` to work, create an executable bash script named
# `batteryleft.sh` with the following content:
#
# #!/bin/bash
# pmset -g batt | grep -E -o "\d{1,3}%"
#
# and place it in the $PATH







#########################################
# PLUGINS
# https://github.com/tmux-plugins/tpm
#
# When adding new plugins, run prefix + I (capital I) to fetch the plugin
#########################################


# List of plugins
set -g @plugin 'tmux-plugins/tpm'

# set -g @plugin 'tmux-plugins/tmux-sensible'  # nicer defaults
# set -g @plugin 'jorgehatccrma/tmux-themepack'  # themes (my own for with light versions)

# setup the theme (see https://github.com/jimeh/tmux-themepack)
# set -g @themepack 'double/orange'
# set -g @themepack 'double-light/orange'


# # persist tmux upon restarts (tmux server or even machine restar)
# set -g @plugin 'tmux-plugins/tmux-resurrect'
# set -g @plugin 'tmux-plugins/tmux-continuum'

# # resurrect vim (or neovim) sessions
# # for vim
# set -g @resurrect-strategy-vim 'session'
# # for neovim
# # set -g @resurrect-strategy-nvim 'session'



# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
