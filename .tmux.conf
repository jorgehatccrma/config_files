# Config inspiration from
# http://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/
# and
# https://github.com/nicknisi/dotfiles/blob/master/tmux/tmux.conf.symlink

# set -g default-command "login-shell"

# # tmux display things in 256 colors
# set -g default-terminal "tmux-256color-italic"

# # enable terminal compability
# set-option -ga terminal-overrides ",tmux-256color-italic:Tc"

# set -g default-terminal "screen-256color"
#

# to simplify version dependent config
run-shell "tmux setenv -g TMUX_VERSION $(tmux -V | cut -c 6-)"


set-option -g default-terminal "xterm-256color"
# set-option -ga terminal-overrides ",xterm-256color:Tc"

#set-option -g default-command "reattach-to-user-namespace -l $SHELL"
if-shell 'test "$(uname)" = "Darwin"' 'source ~/.tmux-osx.conf'


# remap prefix from 'C-b' to 'C-\'
unbind C-b
# set-option -g prefix 'C-\'
# bind-key 'C-\' send-prefix
set-option -g prefix 'M-\'
bind-key 'M-\' send-prefix
# set-option -g prefix 'M-a'
# bind-key 'M-a' send-prefix

# Use | and - to split panes
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
unbind '"'
unbind %

# switch panes using Alt-arrow without prefix
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D


# Enable mouse mode (tmux 2.1 and above)
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.1" | bc)" = 1  ]' \
  "set -g mouse-select-pane on; set -g mode-mouse on; \
    set -g mouse-resize-pane on; set -g mouse-select-window on"
# In version 2.1 "mouse" replaced the previous 4 mouse options
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.1" | bc)" = 1  ]' \
  "set -g mouse on"

# reload config file
bind r source-file ~/.tmux.conf

# set vi mode for copy mode
setw -g mode-keys vi
# more settings to make copy-mode more vim-like
unbind [
bind Escape copy-mode
unbind p
bind p paste-buffer
bind -Tcopy-mode-vi v send -X begin-selection
bind -Tcopy-mode-vi y send -X copy-pipe "reattach-to-user-namespace pbcopy"

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# don't rename windows automatically
set-option -g allow-rename off


###############################################################################
### DESIGN CHANGES ###
# Inspired in
# https://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/
# and
# https://github.com/sbernheim4/dotfiles/blob/master/.tmux.conf
###############################################################################

# panes
set -g pane-border-fg "#1122bb"
set -g pane-active-border-fg "#2233ff"
# set -g pane-border-bg colour235
# set -g pane-active-border-bg colour236

## Status bar design
# status line
set -g status-justify left
set -g status-bg "#1122bb"
set -g status-fg "#c0c0c0"

# messaging
set -g message-fg "#ee3300"
set -g message-bg "#111111"
set -g message-command-fg yellow
set -g message-command-bg black

#window mode
setw -g mode-bg "#0088ff"
setw -g mode-fg "#ffffcc"


###############################################################################
############# Date/Time values that can be displayed in the status line
###############################################################################

# $(echo $USER) - shows the current username
# %a --> Day of week (Mon)
# %A --> Day of week Expanded (Monday)

# %b --> Month (Jan)
# %d --> Day (31)
# %Y --> Year (2017)

# %D --> Month/Day/Year (12/31/2017)
# %v --> Day-Month-Year (31-Dec-2017)

# %r --> Hour:Min:Sec AM/PM (12:30:27 PM)
# %T --> 24 Hour:Min:Sec (16:30:27)
# %X --> Hour:Min:Sec (12:30:27)
# %R --> 24 Hour:Min (16:30)
# %H --> 24 Hour (16)
# %l --> Hour (12)
# %M --> Mins (30)
# %S --> Seconds (09)
# %p --> AM/PM (AM)

# For a more complete list view: https://linux.die.net/man/3/strftime


###############################################################################
############# Character pair Replaced with
###############################################################################


#(shell-command) First line of the command's output
#[attributes] Colour or attribute change
#H Hostname of local host
#h Hostname of local host without the domain name
#I Current window index
#P Current pane index
#S Session name
#W Current window name
## A literal '#'


###############################################################################
############# Status line formatting
###############################################################################

# Refresh status line every 2 seconds
set -g status-interval 2

# Start window and pane indices at 1.
set -g base-index 1
set -g pane-base-index 1

# length of tmux status line
set -g status-left-length 30
set -g status-right-length 150

#Set the left and right status
# set -g status-left '#[bg=colour7]#[fg=colour0] ❐ #S #[bg=colour8]#[fg=colour7]#[fg=colour1]  ♥ #(~/dotfiles/tmux_scripts/battery.sh) #{?client_prefix,⌨️ ,} '
# set -g status-right '#[fg=colour2]#(~/dotfiles/tmux_scripts/uptime.sh) #[fg=colour0]⮃ #[fg=colour4]#[bg=colour4]#[fg=colour0] #(~/dotfiles/tmux_scripts/music.sh) #[bg=colour4]#[fg=colour7]#[bg=colour7]#[fg=colour0] %b %d %H:%M '

set -g status-left '#[bg=#2233ff,fg=#ffffff] #S #[fg=#2233ff,bg=#1122bb]#[bg=#1122bb] '

# Display song playing on Spotify
set -g status-right '#[fg=#2233ff,bg=#1122bb]#[bg=#2233ff,fg=#ffffff]#(tmux-spotify-info)#(itunes-playing.sh) #[bg=#2233ff,fg=#222222]#[bg=#222222,fg=colour33]  #(batteryleft.sh) │ %b %d %H:%M '


# For tmux-spotify-info to work (OS X only), add a script called 'tmux-spotify-info' to the
# path (e.g. ~/bin/tmux-spotify-info) with the following content (from
# https://github.com/jdxcode/tmux-spotify-info/blob/master/tmux-spotify-info):
#
# #!/usr/bin/env osascript
# # Returns the current playing song in Spotify for OSX
#
# tell application "Spotify"
#   if it is running then
#     if player state is playing then
#       set track_name to name of current track
#       set artist_name to artist of current track

#       if artist_name > 0
#         # If the track has an artist set and is therefore most likely a song rather than an advert
#         "♫ " & artist_name & " - " & track_name
#       else
#         # If the track doesn't have an artist set and is therefore most likely an advert rather than a song
#         "~ " & track_name
#       end if
#     end if
#   end if
# end tell


# for `batterleft.sh` to work, create an executable bash script named
# `batteryleft.sh` with the following content:
#
# #!/bin/bash
# pmset -g batt | grep -E -o "\d{1,3}%"
#
# and place it in the $PATH







#########################################
# PLUGINS
# https://github.com/tmux-plugins/tpm
#
# When adding new plugins, run prefix + I (capital I) to fetch the plugin
#########################################


# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'  # nicer defaults

# set -g @plugin 'jimeh/tmux-themepack'  # themes
set -g @plugin 'jorgehatccrma/tmux-themepack'  # themes (my own for with light versions)


# setup the theme (see https://github.com/jimeh/tmux-themepack)
# set -g @themepack 'double/orange'
set -g @themepack 'double-light/orange'

# better mouse scroll support
#if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.1" | bc)" = 1  ]' \
#  "set -g @plugin 'nhdaly/tmux-better-mouse-mode'"
set -g @plugin 'nhdaly/tmux-better-mouse-mode'

# persist tmux upon restarts (tmux server or even machine restar)
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

# resurrect vim (or neovim) sessions
# for vim
set -g @resurrect-strategy-vim 'session'
# for neovim
# set -g @resurrect-strategy-nvim 'session'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
